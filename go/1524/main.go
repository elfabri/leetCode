/*
Number of Sub-arrays With Odd Sum
Medium

Given an array of integers arr, return the number of subarrays with an odd sum.

Since the answer can be very large, return it modulo 10^9 + 7.

*/

package main

import (
	"fmt"
)

func numOfSubarrays(arr []int) int {
    even := 1       // individual even numbers quantity
    odd := 0        // individual odd numbers quantity
    prefixSum := 0
    numOdd := 0     // number of odd sub arrays

    for _, num := range arr {
        prefixSum += num
        if prefixSum%2 == 0 {
            // If the current prefix sum is even,
            // the number of subarrays with odd sum is
            // the number of odd prefix sums so far
            numOdd += odd
            even++
        } else {
            // If the current prefix sum is odd,
            // the number of subarrays with odd sum
            // is the number of even prefix sums so far
            numOdd += even
            odd++
        }
    }

    return numOdd % int(1e9 + 7)
}

func main() {
    arr := []int{
        74,19,96,25,73,78,14,47,49,56,14,46,24,61,98,62,90,11,2,64,15,97,26,15,32,51,3,59,66,77,72,84,81,84,77,18,74,46,94,20,54,71,70,93,33,57,30,62,4,52,5,51,87,62,26,7,84,41,4,50,69,28,72,76,68,50,13,29,79,87,93,76,88,97,96,30,17,94,41,74,38,46,27,63,62,36,59,62,49,63,81,91,81,73,91,53,15,72,61,94,60,16,45,11,55,97,16,75,36,51,22,100,72,98,57,61,31,86,23,47,18,53,94,67,37,85,93,75,64,63,35,66,2,68,68,24,4,39,86,46,31,62,80,79,35,56,44,79,41,95,60,38,52,18,33,100,2,26,44,19,28,87,98,9,34,4,9,46,17,82,71,21,64,24,47,40,31,25,51,15,90,26,93,95,5,60,96,96,20,15,12,34,70,44,17,34,67,42,73,63,2,91,23,1,26,72,78,95,38,19,40,85,1,39,42,17,49,25,92,82,44,81,36,28,2,52,88,99,8,80,78,60,76,11,8,57,52,93,11,10,72,54,79,34,76,11,62,79,43,2,32,29,54,60,79,83,20,9,69,85,98,100,68,38,72,77,94,86,31,93,21,64,59,53,88,3,9,15,42,96,40,99,38,3,15,87,69,57,87,29,34,27,9,64,62,80,2,58,22,10,23,39,96,76,14,36,95,74,37,2,89,23,83,83,65,81,25,70,16,41,78,68,86,13,21,55,68,17,34,3,50,18,17,57,35,41,43,13,27,83,52,48,16,43,21,66,50,42,84,41,2,19,94,51,50,78,85,42,61,50,27,58,73,83,11,15,34,23,81,24,10,10,28,16,7,71,60,76,92,44,32,70,59,2,54,97,35,28,51,34,64,22,95,100,27,40,8,76,97,1,40,44,79,54,70,40,87,50,86,38,42,77,5,70,88,35,46,40,95,41,44,19,23,45,48,62,63,48,44,9,63,34,96,43,13,37,28,60,25,92,24,63,91,90,15,74,80,86,39,38,73,21,29,2,63,9,35,6,76,90,30,36,24,84,72,37,78,3,57,18,25,3,45,97,28,2,84,85,41,22,57,28,9,87,87,90,42,52,9,79,97,57,85,77,14,75,65,6,61,17,50,79,22,43,28,16,52,48,4,99,94,39,93,42,78,76,46,20,19,57,89,34,32,34,80,81,48,18,62,55,2,41,93,8,100,3,42,34,61,22,78,64,65,39,21,1,25,71,3,76,12,42,39,70,13,61,9,25,26,3,13,65,19,28,9,58,20,80,75,36,49,7,39,69,43,30,69,4,55,61,64,38,5,21,42,71,24,44,30,19,91,83,91,72,37,4,64,63,50,69,48,39,30,74,26,44,46,54,19,19,66,7,36,76,13,51,50,26,50,12,67,24,13,35,54,99,60,22,50,10,26,55,45,87,62,21,85,80,36,84,87,58,99,46,52,93,18,42,16,95,37,50,28,69,87,29,88,24,96,31,24,20,42,45,10,95,8,39,3,57,22,19,70,10,74,49,2,27,73,57,81,24,19,82,27,19,80,16,2,23,97,11,71,2,100,21,61,68,46,37,15,67,62,70,37,93,71,64,65,13,25,47,81,16,21,100,6,71,24,5,26,61,98,76,60,47,2,12,97,89,65,39,64,44,62,3,17,85,30,2,50,83,39,76,5,50,93,35,39,37,2,29,96,5,17,79,41,83,54,94,57,61,74,94,83,68,47,98,16,100,18,80,38,85,36,58,6,63,69,81,56,94,56,10,60,68,96,4,91,44,55,77,67,64,65,91,66,85,11,73,73,77,22,62,3,20,78,65,96,77,97,41,33,59,35,94,84,65,84,20,74,68,32,21,64,50,25,67,77,55,40,6,19,64,8,77,90,67,58,55,11,53,74,98,30,13,78,78,2,90,80,99,23,91,46,69,65,18,30,69,66,54,96,54,52,92,3,17,22,3,37,47,13,98,12,53,39,88,61,84,47,7,50,13,98,46,76,81,73,39,64,86,45,81,60,2,53,29,92,25,83,37,88,85,39,54,24,27,28,83,61,8,91,42,74,65,7,83,57,79,2,76,48,21,84,40,41,99,50,63,63,13,62,47,17,73,93,98,60,40,65,88,17,45,54,44,19,52,84,35,57,65,16,82,69,35,58,82,5,47,77,46,43,56,88,58,34,89,82,76,68,34,50,16,91,32,49,17,66,81,64,60,90,23,85,34,60,32,53,99,47,57,2,43,83,5,13,92,49,10,22,77,91,83,95,70,94,76,34,14,82,70,21,95,43,37,79,63,57,27,43,22,5,17,43,28,61,10,35,95,32,31,80,89,2,72,43,23,65,6,45,78,39,69,84,61,18,19,32,65,59,38,79,78,95,51,68,63,97,71,87,19,80,72,59,84,46,55,60,94,61,23,43,19,51,2,27,60,30,86,4,51,8,50,74,98,93,23,72,31,90,7,80,25,35,46,1,11,73,26,67,78,3,71,100,69,2,8,45,52,54,12,81,39,82,3,11,47,76,67,16,90,70,82,95,82,25,31,66,6,33,85,29,59,9,91,11,48,7,16,19,85,40,55,98,33,59,67,91,95,80,77,94,33,90,63,45,35,74,31,47,48,91,92,48,62,81,37,15,13,37,70,93,39,32,82,57,41,81,22,96,90,67,56,38,31,77,64,47,28,25,25,2,79,52,75,17,75,79,27,24,3,96,53,3,60,8,14,4,78,39,22,65,38,35,5,98,35,86,90,86,28,67,70,26,8,77,66,30,55,5,84,47,66,28,50,49,59,74,34,41,98,32,94,68,30,10,36,37,12,73,8,17,65,80,21,49,91,53,63,68,26,22,34,59,76,6,64,60,56,60,71,97,78,24,29,89,60,73,77,51,8,88,95,55,82,38,51,91,51,46,84,34,63,7,87,87,78,69,59,58,23,6,74,17,89,23,25,4,25,48,74,71,1,18,91,38,25,95,41,
    }

    num := numOfSubarrays(arr)

    fmt.Printf("a: %d\n", num)
    
    arrb := []int{10,10,5}
    numb := numOfSubarrays(arrb)
    fmt.Printf("should be 3, got: %d\n", numb)
}


